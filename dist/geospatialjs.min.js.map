{"version":3,"sources":["BoundingBox.js","GeolocationCode.js","GpxTrack.js","LatLng.js","TrackPoint.js","TrackSegment.js","Util.js"],"names":["GeospatialJS","mod","BoundingBox","self","this","north","ko","observable","east","south","west","setFromLocations","locations","forEach","x","lat","lng","ISO7064Mod11_10Check","GeolocationCode","baseSequence","toBase","decimal","symbols","split","base","length","conversion","Math","floor","parseInt","fromBase","string","digits","number","multiplier","i","digit","indexOf","pad","Array","join","slice","parseCode","code","idWithCheckDigit","replace","id","checkDigit","computeCheck","getCode","plat","plng","parseFloat","isNaN","latInt","lngInt","findCodes","found","reg","matches","exec","push","encode","str","verify","t","c","charCodeAt","f","getCheckDigit","val","getData","substring","GpxTrack","trackXml","getClosestPoint","timestamp","segment","findSegmentByTimestamp","getClosestPointResursive","points","startIdx","endIdx","rec","idx","point","time","maxDelta","delta","abs","_","segments","find","unix","startTime","endTime","getElementsByTagName","map","TrackSegment","LatLng","data","display","ew","ns","format","formatNum","distance","toRad","value","PI","R","dLat","dLon","lat1","lat2","a","sin","cos","atan2","sqrt","d","toDms","deg","md","m","sd","toJS","toDmsFormat","dms","toFixed","displayDms","computed","glatlng","displayDec","latlng","distanceDisplay","dist","gridId","round","geolocatorLink","mapLink","lang","NS","EW","geohackLink","geocodeLink","TrackPoint","xmlNode","index","getAttribute","getNearbyPoint","targetIndex","speed","pointCount","j","bearing","lon1","lon2","y","toBrng","eleNodes","ele","textContent","timeNodes","moment","track","trackpoints","pointIndex","min","max","formatString","args","arguments","match","precision","options","defaultOptions","thousandSeparator","decimalSeparator","opt","$","extend"],"mappings":"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","file":"geospatialjs.min.js","sourcesContent":["/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function(mod) {\r\n    \"use strict\";\r\n\r\n    mod.BoundingBox = function() {\r\n        var self = this;\r\n\r\n        self.north = ko.observable();\r\n        self.east = ko.observable();\r\n        self.south = ko.observable();\r\n        self.west = ko.observable();\r\n\r\n        self.setFromLocations = function(locations) {\r\n\r\n            self.north = ko.observable(-90);\r\n            self.east = ko.observable(-180);\r\n            self.south = ko.observable(90);\r\n            self.west = ko.observable(180);\r\n\r\n            locations.forEach(function(x) {\r\n                if(x.lat() < self.south()) self.south(x.lat());\r\n                if(x.lng() < self.west()) self.west(x.lng());\r\n                if(x.lat() > self.north()) self.north(x.lat());\r\n                if(x.lng() > self.east()) self.east(x.lng());\r\n            });\r\n        };\r\n    };\r\n\r\n})(GeospatialJS);","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function(mod) {\r\n    \"use strict\";\r\n\r\n    mod.GeolocationCode = (function() {\r\n\r\n        var baseSequence =  \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\n        var toBase = function (decimal) {\r\n            var symbols = baseSequence.split(\"\");\r\n            var base = baseSequence.length;\r\n            var conversion = \"\";\r\n\r\n            if (base > symbols.length || base <= 1) {\r\n                return false;\r\n            }\r\n\r\n            while (decimal >= 1) {\r\n                conversion = symbols[(decimal - (base * Math.floor(decimal / base)))] + \r\n                             conversion;\r\n                decimal = Math.floor(decimal / base);\r\n            }\r\n\r\n            return (base < 11) ? parseInt(conversion, 10) : conversion;\r\n        };\r\n\r\n        var fromBase = function(string) {\r\n            var symbols = baseSequence.split(\"\");\r\n            var base = baseSequence.length;\r\n\r\n            var digits = string.split(\"\");\r\n            var number = 0;\r\n            var multiplier = 1;\r\n\r\n            for(var i = digits.length-1; i >=0; i--) {\r\n                var digit = digits[i];\r\n\r\n                number += symbols.indexOf(digit) * multiplier;\r\n                multiplier = multiplier*base;\r\n            }\r\n\r\n            return number;\r\n        };\r\n\r\n        var pad = function(string, length) {\r\n          if (string.length < length) { \r\n            string = (new Array(length).join(\"0\")+string).slice(-length); \r\n          }\r\n          return string;\r\n        };\r\n\r\n        var parseCode =  function(code) {\r\n            var idWithCheckDigit = fromBase(code.replace(/^GEO/, ''));\r\n            var id = parseInt((\"\"+idWithCheckDigit).replace(/[_0-9]$/, ''), 10);\r\n            var checkDigit = idWithCheckDigit % 10;\r\n            var isValid = ISO7064Mod11_10Check.computeCheck(\"\"+id) == checkDigit;\r\n            var lat = Math.floor(id/10000000)/10000-90;\r\n            var lng = id%10000000/10000-180;\r\n            return [ lat, lng ];\r\n        };\r\n\r\n        return {\r\n            getCode: function(plat, plng) {\r\n                var lat = parseFloat(plat);\r\n                var lng = parseFloat(plng);\r\n\r\n                if(isNaN(lat) || isNaN(lng) || plat < -90 || plat > 90 || plng < -180 || plng > 180) return \"\";\r\n                var latInt = Math.floor((parseFloat(plat)+90)*10000);\r\n                var lngInt = Math.floor((parseFloat(plng)+180)*10000);\r\n\r\n                var id = lngInt + latInt * 10000000;\r\n                var checkDigit = ISO7064Mod11_10Check.computeCheck(\"\"+id);\r\n                var idWithCheckDigit = id * 10 + checkDigit;\r\n                return \"GEO\"+pad(toBase(idWithCheckDigit), 8);\r\n            },\r\n\r\n            parseCode: parseCode,\r\n\r\n            findCodes: function(string) {\r\n\r\n                var reg = /GEO[a-zA-Z0-9]{8}/g;\r\n                var matches = [], found;\r\n                while ((found = reg.exec(string))) {\r\n                    matches.push(parseCode(found[0]));\r\n                    //reg.lastIndex -= found[0].split(':')[1].length;\r\n                }\r\n                return matches;\r\n            }\r\n        };\r\n    }());\r\n\r\n    /* 3rd party code */\r\n\r\n    /* CheckISO7064Mod11_1.js  Version 1.0.0  24-Jun-05\r\n     * http://modp.com/release/checkdigits/\r\n     * Copyright 2005, Nick Galbreath.  All Rights Reserved.\r\n     * Terms of use: standard BSD License at http://modp.com/license-bsd.txt\r\n     * or http://www.opensource.org/licenses/bsd-license.php\r\n     */\r\n\r\n    function ISO7064Mod11_10Check() {}\r\n\r\n    ISO7064Mod11_10Check.encode = function (str) {\r\n      return str + this.computeCheck(str);\r\n    };\r\n\r\n    ISO7064Mod11_10Check.verify = function (str) {\r\n      var t = 10;\r\n      for (var i = 0; i < str.length -1; ++i) {\r\n        var c = str.charCodeAt(i) - 48;\r\n        if (c < 0 || c > 9) return false;\r\n        t = (2 * this.f(t+c)) % 11;\r\n      }\r\n      return (((t + this.getCheckDigit(str)) % 10) == 1);\r\n    };\r\n\r\n    /**\r\n     * \"private\" helper function\r\n     */\r\n    ISO7064Mod11_10Check.f = function (x) {\r\n      var val = x % 10;\r\n      return (val === 0) ? 10 : val;\r\n    };\r\n\r\n    ISO7064Mod11_10Check.computeCheck = function (str) {\r\n      var t = 10;\r\n      for (var i = 0; i < str.length; ++i) {\r\n        t = (2 * this.f(t + str.charCodeAt(i) - 48)) % 11;\r\n      }\r\n      return (11 - t) % 10;\r\n    };\r\n\r\n    ISO7064Mod11_10Check.getCheckDigit = function (str) {\r\n      return str.charCodeAt(str.length - 1) - 48;\r\n    };\r\n\r\n    ISO7064Mod11_10Check.getData = function (str) {\r\n      return str.substring(0, str.length - 1);\r\n    };\r\n\r\n})(GeospatialJS);","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function (mod) {\r\n    \"use strict\";\r\n\r\n    mod.GpxTrack = function(trackXml) {\r\n        var self = this;\r\n\r\n        self.getClosestPoint = function(timestamp) {\r\n\r\n            var segment = self.findSegmentByTimestamp(timestamp);\r\n            if(!segment) return null;\r\n\r\n            return self.getClosestPointResursive(timestamp, segment, 0, segment.points.length-1, 0);\r\n        };\r\n\r\n        self.getClosestPointResursive = function(timestamp, segment, startIdx, endIdx, rec) {\r\n            \r\n            if(rec > 10) return null; \r\n            var idx = startIdx + Math.floor((endIdx - startIdx)/2);\r\n            var point = segment.points[idx];\r\n        \r\n            if(endIdx-startIdx < 4 || point.time == timestamp) \r\n            {\r\n                var maxDelta = 1000000000;\r\n                for(var i = startIdx; i <= endIdx; i++)\r\n                {\r\n                    var delta = Math.abs(timestamp - segment.points[i].time);\r\n                    if(delta < maxDelta)\r\n                    {\r\n                        point = segment.points[i];\r\n                        maxDelta = delta;\r\n                    }\r\n                }\r\n                return point;\r\n            }\r\n            \r\n            if(point.time > timestamp)\r\n            {\r\n                return self.getClosestPointResursive(timestamp, segment, startIdx, idx, rec+1);\r\n            }\r\n            else\r\n            {\r\n                return self.getClosestPointResursive(timestamp, segment, idx, endIdx, rec+1);\r\n            }\r\n        };\r\n\r\n        self.findSegmentByTimestamp = function(timestamp) {\r\n            if(!timestamp) return null;\r\n            return _(self.segments).find(function(segment) {\r\n                return timestamp.unix() >= segment.startTime.unix() && timestamp.unix() <= segment.endTime.unix();\r\n            });\r\n        };\r\n\r\n        //-- init\r\n\r\n        var idx = 0;\r\n        self.segments = _(trackXml.getElementsByTagName(\"trkseg\")).map(function(x) { \r\n            return new mod.TrackSegment(x, idx++, self); \r\n        });\r\n    };\r\n}(GeospatialJS));\r\n\r\n","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function(mod) {\r\n    \"use strict\";\r\n\r\n    mod.LatLng = function(data)\r\n    {\r\n        var self = this;\r\n\r\n        if(data instanceof Array) {\r\n            if(data.length != 2) {\r\n                throw \"Array with two elements expected\";\r\n            }\r\n            if(typeof data[0] !== \"number\" || typeof data[1] !== \"number\") {\r\n                throw \"Float values expected\";\r\n            }\r\n\r\n            self.lat = ko.observable(data[0]);\r\n            self.lng = ko.observable(data[1]);\r\n        }\r\n        else if(data && data.lat && data.lng)\r\n        {\r\n            if(typeof data.lat !== \"number\" || typeof data.lng !== \"number\") {\r\n                throw \"Float values expected\";\r\n            }\r\n            self.lat = ko.observable(data.lat);\r\n            self.lng = ko.observable(data.lng); \r\n        }\r\n        else\r\n        {\r\n            self.lat = ko.observable(0);\r\n            self.lng = ko.observable(0);    \r\n        }\r\n\r\n\r\n        self.display = function()\r\n        {\r\n            var ew = self.lng() < 0 ? \"W\" : \"E\";\r\n            var ns = self.lat() < 0 ? \"S\" : \"N\";\r\n            \r\n            return mod.format(\"{0}\\u00a0{1} {2}\\u00a0{3}\", \r\n                Math.abs(mod.formatNum(self.lat(), 4)), \r\n                ns, \r\n                Math.abs(mod.formatNum(self.lng(), 4)),\r\n                ew\r\n            );\r\n        };\r\n\r\n        self.distance = function(point)\r\n        {\r\n            var toRad = function(value) { return value * Math.PI / 180; };\r\n            \r\n            if(!(point instanceof mod.LatLng))\r\n                throw \"GeospatialJS.LatLng object expected\";\r\n            \r\n            var R = 6371; // km\r\n            var dLat = toRad((point.lat()-this.lat()));\r\n            var dLon = toRad((point.lng()-this.lng()));\r\n            var lat1 = toRad(this.lat());\r\n            var lat2 = toRad(point.lat());\r\n            \r\n            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                    Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); \r\n            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n            var d = R * c;\r\n            return d;\r\n        };\r\n\r\n        self.toDms = function(deg) {\r\n            var d = parseInt(deg, 10);\r\n            var md = Math.abs(deg-d) * 60;\r\n            var m = parseInt(md, 10);\r\n            var sd = (md - m) * 60;\r\n            return [d, m, sd];\r\n        };\r\n\r\n        self.toJS = function() {\r\n            return { lat: self.lat(), lng: self.lng() };\r\n        };\r\n\r\n        self.toDmsFormat =  function(deg) {\r\n            var dms = self.toDms(deg);\r\n            return GeospatialJS.format(\"{0}\\xB0 {1}\\u2032 {2}\\u2033\", Math.abs(dms[0]), dms[1], dms[2].toFixed(2) );\r\n        };\r\n\r\n        self.displayDms = ko.computed(function(glatlng)\r\n        {\r\n            var ew = self.lng() < 0 ? \"W\" : \"E\";\r\n            var ns = self.lat() < 0 ? \"S\" : \"N\";\r\n            \r\n            return GeospatialJS.format(\"{0} {1} {2} {3}\", \r\n                self.toDmsFormat(self.lat()),\r\n                ns, \r\n                self.toDmsFormat(self.lng()),\r\n                ew\r\n            );\r\n        });\r\n\r\n        self.displayDec = ko.computed(function(glatlng)\r\n        {\r\n            return self.display();\r\n        });\r\n\r\n        self.latlng = ko.computed(function() {\r\n            return { lat: self.lat(), lng: self.lng() };\r\n        });\r\n\r\n        self.str = function(glatlng)\r\n        {\r\n            return \"\" + self.lat()  + \",\" + self.lng();\r\n        };\r\n\r\n        self.distanceDisplay = function(point)\r\n        {\r\n            var dist = this.distance(point);\r\n            return (dist >= 1) ?  GeospatialJS.format(\"{0} {1}\", GeospatialJS.formatNum(dist, 1), \"km\")\r\n                : GeospatialJS.format(\"{0} {1}\", GeospatialJS.formatNum(dist*1000), \"m\");\r\n        };\r\n\r\n        self.gridId = function() {\r\n            return Math.round((90*100+Math.floor(self.lat()*100))*100000 + 180*100+Math.floor(self.lng()*100));\r\n        };\r\n\r\n        self.geolocatorLink = function()\r\n        {\r\n            return GeospatialJS.format(\"http://tools.freeside.sk/geolocator/geolocator.html?q={0},{1}\",\r\n                self.lat(), self.lng()\r\n            );  \r\n        };\r\n\r\n        self.mapLink = function(lang)\r\n        {\r\n            return GeospatialJS.format(\"/map/{0},{1}/15/{2}\", (\"\"+self.lat()).replace(\",\", \".\") , (\"\"+self.lng()).replace(\",\", \".\"), lang ? lang : \"en\");\r\n        };\r\n\r\n        self.NS = function() {\r\n            return self.lat() >= 0 ? \"N\" : \"S\";\r\n        };\r\n\r\n        self.EW = function() {\r\n            return self.lng() >= 0 ? \"E\" : \"W\";\r\n        };\r\n\r\n        self.geohackLink = function()\r\n        {\r\n            return GeospatialJS.format(\"http://toolserver.org/~geohack/geohack.php?params={0}_{1}_{2}_{3}\",\r\n                Math.abs(self.lat()), self.NS(), Math.abs(self.lng()), self.EW()\r\n            );  \r\n        };\r\n\r\n        self.geocodeLink = ko.computed(function() {\r\n             return GeospatialJS.format(\"https://geolocation.ws/{0}\", mod.GeolocationCode.getCode(self.lat(),self.lng()));\r\n        });\r\n    };\r\n})(GeospatialJS);","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function (mod) {\r\n    \"use strict\";\r\n\r\n    mod.TrackPoint = function(xmlNode, index, segment) {\r\n        var self = this;\r\n\r\n        self.index = index;\r\n        self.segment = segment;\r\n        self.lat = parseFloat(xmlNode.getAttribute(\"lat\"));\r\n        self.lng = parseFloat(xmlNode.getAttribute(\"lon\"));\r\n\r\n        self.getNearbyPoint = function(index) {\r\n            var targetIndex = self.index + index;\r\n            if(targetIndex < 0 || targetIndex > self.segment.points.length-1)\r\n                return null;\r\n            return self.segment.points[targetIndex];\r\n        };\r\n\r\n        self.distance = function(point)\r\n        {\r\n            var toRad = function(value) { return value * Math.PI / 180; };\r\n            \r\n            var R = 6371; // km\r\n            var dLat = toRad((point.lat-this.lat));\r\n            var dLon = toRad((point.lng-this.lng));\r\n            var lat1 = toRad(this.lat);\r\n            var lat2 = toRad(point.lat);\r\n            \r\n            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                    Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); \r\n            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n            var d = R * c;\r\n            return d;\r\n        };\r\n\r\n        self.speed = function() {\r\n            var pointCount = 10;\r\n            var distance = 0;\r\n\r\n            var points = [];\r\n            for(var i=-1; i>=-pointCount; i--) {\r\n                var point = self.getNearbyPoint(i);\r\n                if(!point) break;\r\n                points.push(point);                \r\n            }\r\n\r\n            if(points.length === 0) return null;\r\n            var time = self.time.unix() - points[points.length-1].time.unix();\r\n            for(var j=0; j<points.length; j++) {\r\n                distance += points[j].distance(j === 0 ? self : points[j-1]);\r\n            }\r\n\r\n            return distance/(time/3600); // km/h\r\n            \r\n        };\r\n\r\n        self.bearing = function() {\r\n            var point = self.getNearbyPoint(-1);\r\n\r\n            var lat1 = self.lat;\r\n            var lon1 = self.lng;\r\n            var lat2 = point.lat;\r\n            var lon2 = point.lng;\r\n\r\n            lat1 = lat1.toRad(); lat2 = lat2.toRad();\r\n            var dLon = (lon2-lon1).toRad();\r\n\r\n            var y = Math.sin(dLon) * Math.cos(lat2);\r\n            var x = Math.cos(lat1)*Math.sin(lat2) -\r\n                  Math.sin(lat1)*Math.cos(lat2)*Math.cos(dLon);\r\n            \r\n            return Math.atan2(y, x).toBrng();\r\n        };\r\n\r\n        var eleNodes = xmlNode.getElementsByTagName(\"ele\");\r\n        if(eleNodes.length > 0)\r\n        {\r\n            self.ele = parseFloat(eleNodes[0].textContent);\r\n        }\r\n\r\n        var timeNodes = xmlNode.getElementsByTagName(\"time\");\r\n        if(timeNodes.length > 0)\r\n        {\r\n            self.time = moment(timeNodes[0].textContent);\r\n        }\r\n    };\r\n\r\n}(GeospatialJS));\r\n","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function (mod) {\r\n    \"use strict\";\r\n\r\n    mod.TrackSegment = function(xmlNode, index, track) {\r\n        var self = this;\r\n\r\n        var trackpoints = xmlNode.getElementsByTagName(\"trkpt\");\r\n        \r\n        var pointIndex = 0;\r\n        \r\n        self.points = _(trackpoints).map(function(x) { \r\n            return new mod.TrackPoint(x, pointIndex++, self); \r\n        });\r\n\r\n        self.index = index; \r\n        self.startTime = _(self.points).min(function(x) { return x.time.unix(); }).time;\r\n        self.endTime = _(self.points).max(function(x) { return x.time.unix(); }).time;\r\n    };   \r\n}(GeospatialJS));\r\n\r\n","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS = GeospatialJS || {};\r\n\r\nGeospatialJS.format = function(formatString) {\r\n    var args = arguments;\r\n\r\n    return formatString.replace(/{(\\d+)}/g, function (match, number) {\r\n        var idx = parseInt(number, 10)+1;\r\n        return typeof args[idx] != 'undefined' ? args[idx] : match;\r\n    });\r\n};\r\n\r\nGeospatialJS.formatNum = function(value, precision, options) {\r\n    if(!value)\r\n        return null;\r\n    var defaultOptions = { \r\n        \"thousandSeparator\": \",\",\r\n        \"decimalSeparator\": \".\"\r\n    };\r\n\r\n    var opt = $.extend({}, defaultOptions, options);\r\n    var f = \"\";\r\n    \r\n    if(precision && precision > 0)\r\n        f = opt.decimalSeparator + value.toFixed(precision).slice(-precision); \r\n    \r\n    return value.toFixed(2).slice(0,-3).replace(/(?=(?!^)(?:\\d{3})+(?!\\d))/g, opt.thousandSeparator) + f;\r\n};"],"sourceRoot":"/source/"}