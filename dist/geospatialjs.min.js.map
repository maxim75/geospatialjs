{"version":3,"sources":["BoundingBox.js","GeolocationBrowserApi.js","GeolocationCode.js","GpxTrack.js","LatLng.js","TrackPoint.js","TrackSegment.js","Util.js","WebResources.js"],"names":["GeospatialJS","mod","BoundingBox","self","this","north","ko","observable","east","south","west","setFromLocations","locations","forEach","x","lat","lng","GeolocationBrowserApi","setLocationUpdates","func","onUpdate","position","parseFloat","String","coords","latitude","longitude","y","loc","lbank","model","LatLng","accuracy","altitude","speed","altitudeAccuracy","heading","date","moment","utc","pubsub","publish","navigator","geolocation","watchPosition","error","maximumAge","timeout","enableHighAccuracy","ISO7064Mod11_10Check","GeolocationCode","baseSequence","toBase","decimal","symbols","split","base","length","conversion","Math","floor","parseInt","fromBase","string","digits","number","multiplier","i","digit","indexOf","pad","Array","join","slice","parseCode","code","idWithCheckDigit","replace","id","checkDigit","computeCheck","getCode","plat","plng","isNaN","latInt","lngInt","findCodes","found","reg","matches","exec","push","encode","str","verify","t","c","charCodeAt","f","getCheckDigit","val","getData","substring","GpxTrack","trackXml","getClosestPoint","timestamp","segment","findSegmentByTimestamp","getClosestPointResursive","points","startIdx","endIdx","rec","idx","point","time","maxDelta","delta","abs","_","segments","find","unix","startTime","endTime","getElementsByTagName","map","TrackSegment","data","display","ew","ns","format","formatNum","distance","toRad","value","PI","R","dLat","dLon","lat1","lat2","a","sin","cos","atan2","sqrt","d","toDms","deg","md","m","sd","toJS","toDmsFormat","dms","toFixed","displayDms","computed","glatlng","displayDec","latlng","distanceDisplay","dist","gridId","round","NS","EW","TrackPoint","xmlNode","index","getAttribute","getNearbyPoint","targetIndex","pointCount","j","bearing","lon1","lon2","toBrng","eleNodes","ele","textContent","timeNodes","track","trackpoints","pointIndex","convertToMultiline","coordinates","type","properties","geometry","min","max","formatString","args","arguments","match","precision","options","defaultOptions","thousandSeparator","decimalSeparator","opt","$","extend","WebResources","geolocatorLink","latLng","mapillary","scaleInDegrees","geohack","geocodeLink","geolocationWsMapLink","lang","zoom"],"mappings":"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","file":"geospatialjs.min.js","sourcesContent":["/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function(mod) {\r\n    \"use strict\";\r\n\r\n    mod.BoundingBox = function() {\r\n        var self = this;\r\n\r\n        self.north = ko.observable();\r\n        self.east = ko.observable();\r\n        self.south = ko.observable();\r\n        self.west = ko.observable();\r\n\r\n        self.setFromLocations = function(locations) {\r\n\r\n            self.north = ko.observable(-90);\r\n            self.east = ko.observable(-180);\r\n            self.south = ko.observable(90);\r\n            self.west = ko.observable(180);\r\n\r\n            locations.forEach(function(x) {\r\n                if(x.lat() < self.south()) self.south(x.lat());\r\n                if(x.lng() < self.west()) self.west(x.lng());\r\n                if(x.lat() > self.north()) self.north(x.lat());\r\n                if(x.lng() > self.east()) self.east(x.lng());\r\n            });\r\n        };\r\n    };\r\n\r\n})(GeospatialJS);","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function(mod) {\r\n    \"use strict\";\r\n\r\n    mod.GeolocationBrowserApi = {\r\n        setLocationUpdates: function(func) {\r\n            var onUpdate = function(position)\r\n            {\r\n                if(!position)\r\n                    pubsub.publish(\"location\", [null]);\r\n                else\r\n                {\r\n                    var lat = parseFloat((position.coords) ? new String(position.coords.latitude) : position.x);\r\n                    var lng = parseFloat((position.coords) ? new String(position.coords.longitude) : position.y);\r\n\r\n                    func({\r\n                        loc: new lbank.model.LatLng([lat, lng]),\r\n                        accuracy: position.coords.accuracy,\r\n                        altitude: position.coords.altitude,\r\n                        speed: position.coords.speed,\r\n                        altitudeAccuracy: position.coords.altitudeAccuracy,\r\n                        heading: position.coords.heading,\r\n                        date: moment.utc()\r\n                    });\r\n                }\r\n            };\r\n\r\n            if(navigator.geolocation)\r\n                navigator.geolocation.watchPosition( \r\n                    onUpdate,\r\n                    function(error) { },\r\n                    {\r\n                    maximumAge: 10000,\r\n                    timeout: 5000,\r\n                    enableHighAccuracy: true\r\n            });\r\n        }\r\n    };\r\n\r\n})(GeospatialJS);","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function(mod) {\r\n    \"use strict\";\r\n\r\n    mod.GeolocationCode = (function() {\r\n\r\n        var baseSequence =  \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\n        var toBase = function (decimal) {\r\n            var symbols = baseSequence.split(\"\");\r\n            var base = baseSequence.length;\r\n            var conversion = \"\";\r\n\r\n            if (base > symbols.length || base <= 1) {\r\n                return false;\r\n            }\r\n\r\n            while (decimal >= 1) {\r\n                conversion = symbols[(decimal - (base * Math.floor(decimal / base)))] + \r\n                             conversion;\r\n                decimal = Math.floor(decimal / base);\r\n            }\r\n\r\n            return (base < 11) ? parseInt(conversion, 10) : conversion;\r\n        };\r\n\r\n        var fromBase = function(string) {\r\n            var symbols = baseSequence.split(\"\");\r\n            var base = baseSequence.length;\r\n\r\n            var digits = string.split(\"\");\r\n            var number = 0;\r\n            var multiplier = 1;\r\n\r\n            for(var i = digits.length-1; i >=0; i--) {\r\n                var digit = digits[i];\r\n\r\n                number += symbols.indexOf(digit) * multiplier;\r\n                multiplier = multiplier*base;\r\n            }\r\n\r\n            return number;\r\n        };\r\n\r\n        var pad = function(string, length) {\r\n          if (string.length < length) { \r\n            string = (new Array(length).join(\"0\")+string).slice(-length); \r\n          }\r\n          return string;\r\n        };\r\n\r\n        var parseCode =  function(code) {\r\n            var idWithCheckDigit = fromBase(code.replace(/^GEO/, ''));\r\n            var id = parseInt((\"\"+idWithCheckDigit).replace(/[_0-9]$/, ''), 10);\r\n            var checkDigit = idWithCheckDigit % 10;\r\n            var isValid = ISO7064Mod11_10Check.computeCheck(\"\"+id) == checkDigit;\r\n            var lat = Math.floor(id/10000000)/10000-90;\r\n            var lng = id%10000000/10000-180;\r\n            return [ lat, lng ];\r\n        };\r\n\r\n        return {\r\n            getCode: function(plat, plng) {\r\n                var lat = parseFloat(plat);\r\n                var lng = parseFloat(plng);\r\n\r\n                if(isNaN(lat) || isNaN(lng) || plat < -90 || plat > 90 || plng < -180 || plng > 180) return \"\";\r\n                var latInt = Math.floor((parseFloat(plat)+90)*10000);\r\n                var lngInt = Math.floor((parseFloat(plng)+180)*10000);\r\n\r\n                var id = lngInt + latInt * 10000000;\r\n                var checkDigit = ISO7064Mod11_10Check.computeCheck(\"\"+id);\r\n                var idWithCheckDigit = id * 10 + checkDigit;\r\n                return \"GEO\"+pad(toBase(idWithCheckDigit), 8);\r\n            },\r\n\r\n            parseCode: parseCode,\r\n\r\n            findCodes: function(string) {\r\n\r\n                var reg = /GEO[a-zA-Z0-9]{8}/g;\r\n                var matches = [], found;\r\n                while ((found = reg.exec(string))) {\r\n                    matches.push(parseCode(found[0]));\r\n                    //reg.lastIndex -= found[0].split(':')[1].length;\r\n                }\r\n                return matches;\r\n            }\r\n        };\r\n    }());\r\n\r\n    /* 3rd party code */\r\n\r\n    /* CheckISO7064Mod11_1.js  Version 1.0.0  24-Jun-05\r\n     * http://modp.com/release/checkdigits/\r\n     * Copyright 2005, Nick Galbreath.  All Rights Reserved.\r\n     * Terms of use: standard BSD License at http://modp.com/license-bsd.txt\r\n     * or http://www.opensource.org/licenses/bsd-license.php\r\n     */\r\n\r\n    function ISO7064Mod11_10Check() {}\r\n\r\n    ISO7064Mod11_10Check.encode = function (str) {\r\n      return str + this.computeCheck(str);\r\n    };\r\n\r\n    ISO7064Mod11_10Check.verify = function (str) {\r\n      var t = 10;\r\n      for (var i = 0; i < str.length -1; ++i) {\r\n        var c = str.charCodeAt(i) - 48;\r\n        if (c < 0 || c > 9) return false;\r\n        t = (2 * this.f(t+c)) % 11;\r\n      }\r\n      return (((t + this.getCheckDigit(str)) % 10) == 1);\r\n    };\r\n\r\n    /**\r\n     * \"private\" helper function\r\n     */\r\n    ISO7064Mod11_10Check.f = function (x) {\r\n      var val = x % 10;\r\n      return (val === 0) ? 10 : val;\r\n    };\r\n\r\n    ISO7064Mod11_10Check.computeCheck = function (str) {\r\n      var t = 10;\r\n      for (var i = 0; i < str.length; ++i) {\r\n        t = (2 * this.f(t + str.charCodeAt(i) - 48)) % 11;\r\n      }\r\n      return (11 - t) % 10;\r\n    };\r\n\r\n    ISO7064Mod11_10Check.getCheckDigit = function (str) {\r\n      return str.charCodeAt(str.length - 1) - 48;\r\n    };\r\n\r\n    ISO7064Mod11_10Check.getData = function (str) {\r\n      return str.substring(0, str.length - 1);\r\n    };\r\n\r\n})(GeospatialJS);","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function (mod) {\r\n    \"use strict\";\r\n\r\n    mod.GpxTrack = function(trackXml) {\r\n        var self = this;\r\n\r\n        self.getClosestPoint = function(timestamp) {\r\n\r\n            var segment = self.findSegmentByTimestamp(timestamp);\r\n            if(!segment) return null;\r\n\r\n            return self.getClosestPointResursive(timestamp, segment, 0, segment.points.length-1, 0);\r\n        };\r\n\r\n        self.getClosestPointResursive = function(timestamp, segment, startIdx, endIdx, rec) {\r\n            \r\n            if(rec > 10) return null; \r\n            var idx = startIdx + Math.floor((endIdx - startIdx)/2);\r\n            var point = segment.points[idx];\r\n        \r\n            if(endIdx-startIdx < 4 || point.time == timestamp) \r\n            {\r\n                var maxDelta = 1000000000;\r\n                for(var i = startIdx; i <= endIdx; i++)\r\n                {\r\n                    var delta = Math.abs(timestamp - segment.points[i].time);\r\n                    if(delta < maxDelta)\r\n                    {\r\n                        point = segment.points[i];\r\n                        maxDelta = delta;\r\n                    }\r\n                }\r\n                return point;\r\n            }\r\n            \r\n            if(point.time > timestamp)\r\n            {\r\n                return self.getClosestPointResursive(timestamp, segment, startIdx, idx, rec+1);\r\n            }\r\n            else\r\n            {\r\n                return self.getClosestPointResursive(timestamp, segment, idx, endIdx, rec+1);\r\n            }\r\n        };\r\n\r\n        self.findSegmentByTimestamp = function(timestamp) {\r\n            if(!timestamp) return null;\r\n            return _(self.segments).find(function(segment) {\r\n                return timestamp.unix() >= segment.startTime.unix() && timestamp.unix() <= segment.endTime.unix();\r\n            });\r\n        };\r\n\r\n        //-- init\r\n\r\n        var idx = 0;\r\n        self.segments = _(trackXml.getElementsByTagName(\"trkseg\")).map(function(x) { \r\n            return new mod.TrackSegment(x, idx++, self); \r\n        });\r\n    };\r\n}(GeospatialJS));\r\n\r\n","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function(mod) {\r\n    \"use strict\";\r\n\r\n    mod.LatLng = function(data)\r\n    {\r\n        var self = this;\r\n\r\n        if(data instanceof Array) {\r\n            if(data.length != 2) {\r\n                throw \"Array with two elements expected\";\r\n            }\r\n            if(typeof data[0] !== \"number\" || typeof data[1] !== \"number\") {\r\n                throw \"Float values expected\";\r\n            }\r\n\r\n            self.lat = ko.observable(data[0]);\r\n            self.lng = ko.observable(data[1]);\r\n        }\r\n        else if(data && data.lat && data.lng)\r\n        {\r\n            if(typeof data.lat !== \"number\" || typeof data.lng !== \"number\") {\r\n                throw \"Float values expected\";\r\n            }\r\n            self.lat = ko.observable(data.lat);\r\n            self.lng = ko.observable(data.lng); \r\n        }\r\n        else\r\n        {\r\n            self.lat = ko.observable(0);\r\n            self.lng = ko.observable(0);    \r\n        }\r\n\r\n\r\n        self.display = function()\r\n        {\r\n            var ew = self.lng() < 0 ? \"W\" : \"E\";\r\n            var ns = self.lat() < 0 ? \"S\" : \"N\";\r\n            \r\n            return mod.format(\"{0}\\u00a0{1} {2}\\u00a0{3}\", \r\n                Math.abs(mod.formatNum(self.lat(), 4)), \r\n                ns, \r\n                Math.abs(mod.formatNum(self.lng(), 4)),\r\n                ew\r\n            );\r\n        };\r\n\r\n        self.distance = function(point)\r\n        {\r\n            var toRad = function(value) { return value * Math.PI / 180; };\r\n            \r\n            if(!(point instanceof mod.LatLng))\r\n                throw \"GeospatialJS.LatLng object expected\";\r\n            \r\n            var R = 6371; // km\r\n            var dLat = toRad((point.lat()-this.lat()));\r\n            var dLon = toRad((point.lng()-this.lng()));\r\n            var lat1 = toRad(this.lat());\r\n            var lat2 = toRad(point.lat());\r\n            \r\n            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                    Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); \r\n            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n            var d = R * c;\r\n            return d;\r\n        };\r\n\r\n        self.toDms = function(deg) {\r\n            var d = parseInt(deg, 10);\r\n            var md = Math.abs(deg-d) * 60;\r\n            var m = parseInt(md, 10);\r\n            var sd = (md - m) * 60;\r\n            return [d, m, sd];\r\n        };\r\n\r\n        self.toJS = function() {\r\n            return { lat: self.lat(), lng: self.lng() };\r\n        };\r\n\r\n        self.toDmsFormat =  function(deg) {\r\n            var dms = self.toDms(deg);\r\n            return GeospatialJS.format(\"{0}\\xB0 {1}\\u2032 {2}\\u2033\", Math.abs(dms[0]), dms[1], dms[2].toFixed(2) );\r\n        };\r\n\r\n        self.displayDms = ko.computed(function(glatlng)\r\n        {\r\n            var ew = self.lng() < 0 ? \"W\" : \"E\";\r\n            var ns = self.lat() < 0 ? \"S\" : \"N\";\r\n            \r\n            return GeospatialJS.format(\"{0} {1} {2} {3}\", \r\n                self.toDmsFormat(self.lat()),\r\n                ns, \r\n                self.toDmsFormat(self.lng()),\r\n                ew\r\n            );\r\n        });\r\n\r\n        self.displayDec = ko.computed(function(glatlng)\r\n        {\r\n            return self.display();\r\n        });\r\n\r\n        self.latlng = ko.computed(function() {\r\n            return { lat: self.lat(), lng: self.lng() };\r\n        });\r\n\r\n        self.str = function(glatlng)\r\n        {\r\n            return \"\" + self.lat()  + \",\" + self.lng();\r\n        };\r\n\r\n        self.distanceDisplay = function(point)\r\n        {\r\n            var dist = this.distance(point);\r\n            return (dist >= 1) ?  GeospatialJS.format(\"{0} {1}\", GeospatialJS.formatNum(dist, 1), \"km\")\r\n                : GeospatialJS.format(\"{0} {1}\", GeospatialJS.formatNum(dist*1000), \"m\");\r\n        };\r\n\r\n        self.gridId = function() {\r\n            return Math.round((90*100+Math.floor(self.lat()*100))*100000 + 180*100+Math.floor(self.lng()*100));\r\n        };\r\n\r\n        self.NS = function() {\r\n            return self.lat() >= 0 ? \"N\" : \"S\";\r\n        };\r\n\r\n        self.EW = function() {\r\n            return self.lng() >= 0 ? \"E\" : \"W\";\r\n        };\r\n    };\r\n})(GeospatialJS);","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function (mod) {\r\n    \"use strict\";\r\n\r\n    mod.TrackPoint = function(xmlNode, index, segment) {\r\n        var self = this;\r\n\r\n        self.index = index;\r\n        self.segment = segment;\r\n        self.lat = parseFloat(xmlNode.getAttribute(\"lat\"));\r\n        self.lng = parseFloat(xmlNode.getAttribute(\"lon\"));\r\n\r\n        self.getNearbyPoint = function(index) {\r\n            var targetIndex = self.index + index;\r\n            if(targetIndex < 0 || targetIndex > self.segment.points.length-1)\r\n                return null;\r\n            return self.segment.points[targetIndex];\r\n        };\r\n\r\n        self.distance = function(point)\r\n        {\r\n            var toRad = function(value) { return value * Math.PI / 180; };\r\n            \r\n            var R = 6371; // km\r\n            var dLat = toRad((point.lat-this.lat));\r\n            var dLon = toRad((point.lng-this.lng));\r\n            var lat1 = toRad(this.lat);\r\n            var lat2 = toRad(point.lat);\r\n            \r\n            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                    Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); \r\n            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n            var d = R * c;\r\n            return d;\r\n        };\r\n\r\n        self.speed = function() {\r\n            var pointCount = 10;\r\n            var distance = 0;\r\n\r\n            var points = [];\r\n            for(var i=-1; i>=-pointCount; i--) {\r\n                var point = self.getNearbyPoint(i);\r\n                if(!point) break;\r\n                points.push(point);                \r\n            }\r\n\r\n            if(points.length === 0) return null;\r\n            var time = self.time.unix() - points[points.length-1].time.unix();\r\n            for(var j=0; j<points.length; j++) {\r\n                distance += points[j].distance(j === 0 ? self : points[j-1]);\r\n            }\r\n\r\n            return distance/(time/3600); // km/h\r\n            \r\n        };\r\n\r\n        self.bearing = function() {\r\n            var point = self.getNearbyPoint(-1);\r\n\r\n            var lat1 = self.lat;\r\n            var lon1 = self.lng;\r\n            var lat2 = point.lat;\r\n            var lon2 = point.lng;\r\n\r\n            lat1 = lat1.toRad(); lat2 = lat2.toRad();\r\n            var dLon = (lon2-lon1).toRad();\r\n\r\n            var y = Math.sin(dLon) * Math.cos(lat2);\r\n            var x = Math.cos(lat1)*Math.sin(lat2) -\r\n                  Math.sin(lat1)*Math.cos(lat2)*Math.cos(dLon);\r\n            \r\n            return Math.atan2(y, x).toBrng();\r\n        };\r\n\r\n        var eleNodes = xmlNode.getElementsByTagName(\"ele\");\r\n        if(eleNodes.length > 0)\r\n        {\r\n            self.ele = parseFloat(eleNodes[0].textContent);\r\n        }\r\n\r\n        var timeNodes = xmlNode.getElementsByTagName(\"time\");\r\n        if(timeNodes.length > 0)\r\n        {\r\n            self.time = moment(timeNodes[0].textContent);\r\n        }\r\n    };\r\n\r\n}(GeospatialJS));\r\n","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function (mod) {\r\n    \"use strict\";\r\n\r\n    mod.TrackSegment = function(xmlNode, index, track) {\r\n        var self = this;\r\n\r\n        var trackpoints = xmlNode.getElementsByTagName(\"trkpt\");\r\n        \r\n        var pointIndex = 0;\r\n        \r\n        self.points = _(trackpoints).map(function(x) { \r\n            return new mod.TrackPoint(x, pointIndex++, self); \r\n        });\r\n\r\n        self.convertToMultiline = function() { \r\n            var coordinates = _(self.points).map(function(point) {\r\n                return [ point.lng, point.lat ];\r\n            });\r\n            \r\n            return {\r\n                \"type\": \"Feature\",\r\n                \"properties\": {},\r\n                \"geometry\": {\r\n                    \"type\": \"LineString\",\r\n                    \"coordinates\": coordinates\r\n                }\r\n            };\r\n        };\r\n\r\n        self.index = index; \r\n        self.startTime = _(self.points).min(function(x) { return x.time.unix(); }).time;\r\n        self.endTime = _(self.points).max(function(x) { return x.time.unix(); }).time;\r\n\r\n        \r\n    };   \r\n}(GeospatialJS));\r\n\r\n","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS = GeospatialJS || {};\r\n\r\nGeospatialJS.format = function(formatString) {\r\n    var args = arguments;\r\n\r\n    return formatString.replace(/{(\\d+)}/g, function (match, number) {\r\n        var idx = parseInt(number, 10)+1;\r\n        return typeof args[idx] != 'undefined' ? args[idx] : match;\r\n    });\r\n};\r\n\r\nGeospatialJS.formatNum = function(value, precision, options) {\r\n    if(!value)\r\n        return null;\r\n    var defaultOptions = { \r\n        \"thousandSeparator\": \",\",\r\n        \"decimalSeparator\": \".\"\r\n    };\r\n\r\n    var opt = $.extend({}, defaultOptions, options);\r\n    var f = \"\";\r\n    \r\n    if(precision && precision > 0)\r\n        f = opt.decimalSeparator + value.toFixed(precision).slice(-precision); \r\n    \r\n    return value.toFixed(2).slice(0,-3).replace(/(?=(?!^)(?:\\d{3})+(?!\\d))/g, opt.thousandSeparator) + f;\r\n};","/* \r\n * Copyright (C) 2015 Maksym Kozlenko <max@kozlenko.info>\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license.  See the LICENSE file for details.\r\n */\r\n\r\nvar GeospatialJS;\r\nGeospatialJS = GeospatialJS || {};\r\n\r\n(function (mod) {\r\n    \"use strict\";\r\n\r\n    mod.WebResources = {\r\n        geolocatorLink: function(latLng)\r\n        {\r\n            return mod.format(\"http://tools.freeside.sk/geolocator/geolocator.html?q={0},{1}\",\r\n                latLng.lat(), latLng.lng()\r\n            );  \r\n        },\r\n\r\n        mapillary: function(latLng)\r\n        {\r\n            var scaleInDegrees = 0.1;\r\n            var north = latLng.lat()-scaleInDegrees/2;\r\n            var south = latLng.lat()+scaleInDegrees/2;\r\n            var east = latLng.lng()+scaleInDegrees/2;\r\n            var west = latLng.lng()-scaleInDegrees/2;\r\n\r\n            return mod.format(\"http://www.mapillary.com/map/search/{0}/{1}/{2}/{3}\",\r\n                south, north, west, east\r\n            );  \r\n        },\r\n\r\n        geohack: function(latLng)\r\n        {\r\n            return mod.format(\"http://toolserver.org/~geohack/geohack.php?params={0}_{1}_{2}_{3}\",\r\n                Math.abs(latLng.lat()), latLng.NS(), Math.abs(latLng.lng()), latLng.EW()\r\n            );  \r\n        },\r\n\r\n        geocodeLink: function(latLng) {\r\n             return mod.format(\"https://geolocation.ws/{0}\", \r\n                mod.GeolocationCode.getCode(latLng.lat(),latLng.lng()));\r\n        },\r\n\r\n        geolocationWsMapLink: function(latLng, options) {\r\n            var lang = (options && options.lang) || \"en\";\r\n            var zoom = (options && options.zoom) || 15;\r\n\r\n            return mod.format(\"https://geolocation.ws/map/{0},{1}/{2}/{3}\", \r\n                (\"\"+latLng.lat()).replace(\",\", \".\") , \r\n                (\"\"+latLng.lng()).replace(\",\", \".\"), \r\n                zoom,\r\n                lang);\r\n        }\r\n    };   \r\n}(GeospatialJS));\r\n\r\n"],"sourceRoot":"/source/"}